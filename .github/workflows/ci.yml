name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.20'

jobs:
  # Job de vérification du code
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Format check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted properly"
          gofmt -s -l .
          exit 1
        fi
        echo "Code is properly formatted"

    - name: Vet check
      run: go vet ./...

    - name: Lint check
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  # Job de tests unitaires
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests with race detection
      run: make test-verbose

    - name: Generate coverage report
      run: make test-coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./scraper/coverage.out
        flags: unittests
        name: codecov-umbrella

  # Job de tests d'intégration
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Create test environment file
      run: |
        cat > .env << EOF
        MONGODB_URI=mongodb://test:test@localhost:27017/testdb?authSource=admin
        PORT=8080
        EOF

    - name: Run integration tests
      run: |
        echo "Running integration tests..."
        go test -v -tags=integration ./...

    - name: Test scraper functionality
      run: |
        echo "Testing scraper..."
        cd scraper && timeout 30s go run . || echo "Scraper test completed"

  # Job de compilation et build
  build:
    name: Build and Compile
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Build API server
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        mkdir -p dist
        go build -ldflags="-s -w" -o dist/server-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./main.go

    - name: Build scraper
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        cd scraper
        go build -ldflags="-s -w" -o ../dist/scraper-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} ./scraper.go

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.os }}-${{ matrix.arch }}
        path: dist/
        retention-days: 7

  # Job de sécurité
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec.sarif ./...

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  # Job de build Docker
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [unit-tests, build]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./dockerfile
        push: false
        tags: |
          go-api-mongo-scrapper:latest
          go-api-mongo-scrapper:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm --name test-container -d -p 8080:8080 go-api-mongo-scrapper:latest
        sleep 10
        docker logs test-container
        docker stop test-container

  # Job de notification
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, build, security, docker-build]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "CI Pipeline completed successfully!"
        echo "All checks passed:"
        echo "  - Code quality: PASSED"
        echo "  - Unit tests: PASSED"
        echo "  - Integration tests: PASSED"
        echo "  - Build: PASSED"
        echo "  - Security: PASSED"
        echo "  - Docker: PASSED"

    - name: Notify failure
      if: ${{ needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "CI Pipeline failed!"
        echo "Please check the failed jobs and fix the issues."
        exit 1 