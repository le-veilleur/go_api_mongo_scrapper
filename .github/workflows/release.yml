name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.20'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      run: |
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## What's Changed" >> $GITHUB_OUTPUT
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### Docker
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker run -p 8080:8080 ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          ```
          
          ### Binary
          Download the appropriate binary for your platform from the assets below.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            name: linux-amd64
          - os: linux
            arch: arm64
            name: linux-arm64
          - os: windows
            arch: amd64
            name: windows-amd64
          - os: darwin
            arch: amd64
            name: darwin-amd64
          - os: darwin
            arch: arm64
            name: darwin-arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Build API server
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p dist
        BINARY_NAME="server-${{ matrix.name }}"
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o "dist/${BINARY_NAME}" ./main.go

    - name: Build scraper
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        cd scraper
        BINARY_NAME="scraper-${{ matrix.name }}"
        if [ "${{ matrix.os }}" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o "../dist/${BINARY_NAME}" ./scraper.go

    - name: Create archive
      run: |
        cd dist
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip -r "../go-api-mongo-scrapper-${{ github.ref_name }}-${{ matrix.name }}.zip" .
        else
          tar -czf "../go-api-mongo-scrapper-${{ github.ref_name }}-${{ matrix.name }}.tar.gz" .
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./go-api-mongo-scrapper-${{ github.ref_name }}-${{ matrix.name }}.${{ matrix.os == 'windows' && 'zip' || 'tar.gz' }}
        asset_name: go-api-mongo-scrapper-${{ github.ref_name }}-${{ matrix.name }}.${{ matrix.os == 'windows' && 'zip' || 'tar.gz' }}
        asset_content_type: ${{ matrix.os == 'windows' && 'application/zip' || 'application/gzip' }}

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-binaries, build-docker]
    if: always()
    steps:
    - name: Notify success
      if: ${{ needs.create-release.result == 'success' && needs.build-binaries.result == 'success' && needs.build-docker.result == 'success' }}
      run: |
        echo "Release ${{ github.ref_name }} created successfully!"
        echo "- Binaries built for multiple platforms"
        echo "- Docker image pushed to registry"
        echo "- Release notes generated"

    - name: Notify failure
      if: ${{ needs.create-release.result == 'failure' || needs.build-binaries.result == 'failure' || needs.build-docker.result == 'failure' }}
      run: |
        echo "Release ${{ github.ref_name }} failed!"
        echo "Please check the logs and fix the issues."
        exit 1 